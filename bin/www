#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('todo-chat:server');
var http = require('http');
var models = require("../models");
var websocketserver = new require('websocket').server;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

let wsServer = new websocketserver({
    // WebSocket server is tied to a HTTP server. WebSocket request is just
    // an enhanced HTTP request. For more info http://tools.ietf.org/html/rfc6455#page-6
    httpServer: server
});

let clients = [];

wsServer.on('request', (request) => {
    let connection = request.accept(null, request.origin);
    clients.push(connection);

    connection.on('message', (request) => {
        for (var i=0; i < clients.length; i++) {
            clients[i].sendUTF('ciao');
        }
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */
models.sequelize.sync().then( function(){
      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);
    }
);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
